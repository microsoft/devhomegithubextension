#
# This workflow will build and run all unit tests.
#

name: GitHubExt-CI
on:
  push:
  pull_request:
    branches: [ "main", "feature*" ]

jobs:
  build-and-test:
    strategy:
      matrix:
        configuration: [Release, Debug]
        platform: [x64, x86, arm64]
        os: [windows-latest]
        dotnet-version: ['6.0.x']
        exclude:
        - configuration: Debug
          platform: x64
        - configuration: Release
          platform: x86
        - configuration: Debug
          platform: arm64
    runs-on: ${{ matrix.os }}
    env:
      MSIX_VERSION: "0.1"
      SDK_VERSION: "0.1"
    steps:
    - uses: actions/checkout@v3
      with:
        clean: true

    - name: Setup .NET SDK ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
      env:
        NUGET_AUTH_TOKEN: ${{ secrets.GPR_READ_TOKEN }}

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.1
      with:
        vs-version: '17.5'

    - name: Download nuget
      run: |
        mkdir ".\.nuget"
        Invoke-WebRequest "https://dist.nuget.org/win-x86-commandline/latest/nuget.exe" -OutFile ".\.nuget\nuget.exe"

    - name: Find VsDevCmd.bat
      run: |
        $VSDevCmd = & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere" -latest -find Common7\tools\VSDevCmd.bat
        if (!$VSDevCmd) { exit 1 }
        echo "Using VSDevCmd: ${VSDevCmd}"
        Add-Content $env:GITHUB_ENV "VSDevCmd=$VSDevCmd"

    - name: Restore dependencies
      run: |
        dotnet restore GITServices.sln -p:PublishReadyToRun=true

    - name: Restore nuget packages
      run: |
        cmd /c "$env:VSDevCmd" "&" nuget restore GITServices.sln

    - name: Build_DevHomeGitHubExtension
      run: cmd /c "$env:VSDevCmd" "&" msbuild /m /p:Configuration=${{ matrix.configuration }},Platform=${{ matrix.platform }} GITServices.sln

    - name: Find vstest.console.exe
      if: ${{ matrix.platform != 'arm64' }}
      run: |
        $VSDevTestCmd = & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere" -latest -prerelease -products * -find **\TestPlatform\vstest.console.exe
        if (!$VSDevTestCmd) { exit 1 }
        echo "Using VSDevTestCmd: ${VSDevTestCmd}"
        Add-Content $env:GITHUB_ENV "VSDevTestCmd=$VSDevTestCmd"

    - name: DevHome UnitTests
      if: ${{ matrix.platform != 'arm64' }}
      run: cmd /c "$env:VSDevTestCmd" /Platform:${{ matrix.platform }} BuildOutput\\${{ matrix.configuration }}\\${{ matrix.platform }}\\GitHubPlugin.Test\\GitHubPlugin.Test.dll
