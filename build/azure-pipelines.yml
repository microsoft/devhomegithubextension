trigger:
- main
- staging
- release

pool:
  vmImage: 'windows-latest'

parameters:
  - name: SignOutput
    type: boolean
    default: False
  - name: Platforms
    type: object
    default:
    - x86
    - x64
    - arm64
  - name: Configurations
    type: object
    default:
    - debug
    - release

variables:
  MSIXVersion: '0.300'
  solution: '**/GITServices.sln'
  appxPackageDir: 'AppxPackages'
  testOutputArtifactDir: 'TestResults'

resources:
  repositories:
  - repository: templates_onebranch
    type: git
    name: OneBranch.Pipelines/GovernedTemplates
    ref: refs/heads/main

stages:
- stage: Build_Msix
  dependsOn: []
  jobs:
  - ${{ each configuration in parameters.Configurations }}:
    - ${{ each platform in parameters.Platforms }}:
      - job: Build_${{ platform }}_${{ configuration }}
        steps:
        - task: NuGetToolInstaller@1

        - task: NuGetAuthenticate@0
          inputs:
            nuGetServiceConnections: 'DevHomeInternal'

        - task: PowerShell@2
          displayName: Replace Stubbed Files
          inputs:
            filePath: 'build/scripts/Unstub.ps1'

        - task: PowerShell@2
          displayName: Use internal nuget feed
          inputs:
            targetType: inline
            script: >-
              Copy-Item (Join-Path $(Build.SourcesDirectory) "build\nuget.config.internal") -Destination (Join-Path $(Build.SourcesDirectory) "nuget.config")
            pwsh: true

        - task: NuGetCommand@2
          inputs:
            command: 'restore'
            restoreSolution: '$(solution)'
            feedsToUse: 'config'
            nugetConfigPath: 'nuget.config'
            externalFeedCredentials: 'DevHomeInternal'

        - task: MicrosoftTDBuild.tdbuild-task.tdbuild-task.TouchdownBuildTask@1
          displayName: Send and Download Localization Files for Artifacts
          condition: and(eq(variables['EnableLocalization'], 'true'), eq(variables['UpdateLocalization'], 'true'))
          inputs:
            teamId: 71221
            authId: $(TouchdownAppId)
            authKey: $(TouchdownAppKey)
            resourceFilePath: |
              **\en-US\*.resw;P:466
              **\en-US\PDP.xml
            outputDirectoryRoot: LocOutput
            localizationTarget: true
            appendRelativeDir: true
            pseudoSetting: Included

        - task: MicrosoftTDBuild.tdbuild-task.tdbuild-task.TouchdownBuildTask@1
          displayName: Download and Use Localization Files
          condition: eq(variables['EnableLocalization'], 'true')
          retryCountOnTaskFailure: 2
          inputs:
            teamId: 71221
            authId: $(TouchdownAppId)
            authKey: $(TouchdownAppKey)
            resourceFilePath: |
              **\en-US\*.resw;P:466
            localizationTarget: false
            appendRelativeDir: true
            pseudoSetting: Included

        - task: PowerShell@2
          displayName: Move Loc files one level up
          condition: eq(variables['EnableLocalization'], 'true')
          inputs:
            targetType: inline
            script: >-
              $Files = Get-ChildItem . -R -Filter 'Resources.resw' | ? FullName -Like '*en-US\*\Resources.resw'

              $Files | % { Move-Item -Verbose $_.Directory $_.Directory.Parent.Parent -EA:Ignore }
            pwsh: true

        # Saving one of these makes it really easy to inspect the loc output...
        - powershell: 'tar czf LocOutput.tar.gz LocOutput'
          displayName: 'Archive Loc Output for Submission'
          condition: and(eq(variables['EnableLocalization'], 'true'), eq(variables['UpdateLocalization'], 'true'))

        - task: PublishBuildArtifacts@1
          displayName: 'Publish Artifact: LocOutput'
          condition: and(eq(variables['EnableLocalization'], 'true'), eq(variables['UpdateLocalization'], 'true'))
          inputs:
            PathtoPublish: LocOutput.tar.gz
            ArtifactName: LocOutput

        - task: PowerShell@2
          displayName: Build GITServices Extension
          retryCountOnTaskFailure: 2
          inputs:
            filePath: 'build/scripts/Build.ps1'
            arguments: -Platform "${{ platform }}" -Configuration "${{ configuration }}" -Version $(MSIXVersion) -BuildStep "msix" -AzureBuildingBranch "$(BuildingBranch)" -IsAzurePipelineBuild -ClientId $(GitHubClientId) -ClientSecret $(GitHubClientSecret)

        - task: EsrpCodeSigning@2
          inputs:
            ConnectedServiceName: 'Xlang Code Signing'
            FolderPath: '$(appxPackageDir)\${{ configuration }}'
            Pattern: '*.msix'
            signConfigType: 'inlineSignParams'
            inlineOperation: |
              [
                {
                  "keycode": "CP-230012",
                  "operationSetCode": "SigntoolSign",
                  "parameters": [
                    {
                      "parameterName": "OpusName",
                      "parameterValue": "Microsoft"
                    },
                    {
                      "parameterName": "OpusInfo",
                      "parameterValue": "http://www.microsoft.com"
                    },
                    {
                      "parameterName": "PageHash",
                      "parameterValue": "/NPH"
                    },
                    {
                      "parameterName": "FileDigest",
                      "parameterValue": "/fd sha256"
                    },
                    {
                      "parameterName": "TimeStamp",
                      "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                    }
                  ],
                  "toolName": "signtool.exe",
                  "toolVersion": "6.2.9304.0"
                }
              ]
            SessionTimeout: '60'
            MaxConcurrency: '50'
            MaxRetryAttempts: '5'

        - task: PublishPipelineArtifact@0
          displayName: Publish MSIX Artifacts
          inputs:
            artifactName: msix_${{ platform }}_${{ configuration }}
            targetPath: $(appxPackageDir)\${{ configuration }}

        - task: AzureKeyVault@1
          inputs:
            azureSubscription: 'DevHomeAzureServiceConnection'
            KeyVaultName: 'DevHomeKeyVault'
            SecretsFilter: 'ApiScanConnectionString'
            RunAsPreJob: false

        - task: APIScan@2
          inputs:
            softwareFolder: '$(Build.StagingDirectory)'
            softwareName: 'Dev Home GitHub Extension'
            softwareVersionNum: '1.0'
            softwareBuildNum: '$(Build.BuildId)'
            symbolsFolder: 'SRV*http://symweb'
          env:
            AzureServicesAuthConnectionString: $(ApiScanConnectionString)

        - task: Windows Application Driver@0
          condition: and(always(), ne('${{ platform}}', 'arm64'))
          inputs:
            OperationType: 'Start'

        - task: PowerShell@2
          displayName: 'Run Unittests'
          condition: ne('${{ platform}}', 'arm64')
          retryCountOnTaskFailure: 2
          inputs:
            filePath: 'build/scripts/Test.ps1'
            arguments: -Platform "${{ platform }}" -Configuration "${{ configuration }}" -IsAzurePipelineBuild

        - task: Windows Application Driver@0
          condition: and(always(), ne('${{ platform}}', 'arm64'))
          inputs:
            OperationType: 'Stop'
            
        - task: PublishBuildArtifacts@1
          displayName: 'Publish Test Results'
          condition: and(always(), ne('${{ platform}}', 'arm64'))
          inputs:
            PathtoPublish: $(testOutputArtifactDir)
            artifactName: TestResults

        - task: PublishTestResults@2
          displayName: 'Add Test Results to ADO'
          condition: and(always(), ne('${{ platform}}', 'arm64'))
          inputs:
            testResultsFormat: 'VSTest'
            testResultsFiles: '*.trx'
            searchFolder: '$(testOutputArtifactDir)'
            mergeTestResults: true
            failTaskOnFailedTests: true 
            testRunTitle: '$(Agent.JobName)'
            buildPlatform: '${{ platform }}'
            buildConfiguration: '${{ configuration }}'

        - task: PublishSymbols@2
          displayName: Publish Symbols
          inputs:
            SearchPattern: '**/BuildOutput/**/*.pdb'
            IndexSources: false
            SymbolServerType: TeamServices
            SymbolsProduct: DevHomeGitHubExtension

- stage: SourceAnalysis
  # This stage is expected to run in parallel with BuildWindowsAppSDK-Stages.
  dependsOn: []
  jobs:
  - job: SDLSourcesScanning
    steps:
    # Required by the Packaged ES SDL Templates.
    - checkout: self

    # Typically this has been done.
    - task: NodeTool@0
      displayName: 'Use Node >=8.6.0'
      inputs:
        versionSpec: '>=8.6.0'

    - template: v2/Steps/PackageES/Windows.SDL.Sources.Analysis.OS.Undocked.yml@templates_onebranch
      parameters:
        globalsdl:
          tsa:
            # Not filing bugs for issues found by the scans just yet.
            #enabled: true    
            enabled: false
          codeql:
            # We currently don't disable other scans that are enabled by default. Just ensure that 
            # scans that we are interested in are enabled.
            psscriptanalyzer:
              enable: true
              break: true
            credscan:
              enable: true
              break: true
            policheck:
              enable: true
              break: true
            antimalwarescan:
              enable: true
              break: true
            armory:
              enable: true
              break: true
            eslint:
              enable: true
              break: true

    - task: Flawfinder@2
      displayName: 'Run Flawfinder'
      inputs:
        targetFlawfinderPattern: '$(Build.SourcesDirectory)'
        minRiskLevel: 2
        onlyInputs: false

- stage: Build_MsixBundle
  dependsOn: Build_Msix
  condition: in(dependencies.Build_Msix.result, 'Succeeded')
  jobs:
  - job: Build_MsixBundles
    steps:
      - ${{ each configuration in parameters.Configurations }}:
        - ${{ each platform in parameters.Platforms }}:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: msix_${{ platform }}_${{ configuration }}
              targetPath: $(appxPackageDir)\${{ configuration }}

        - task: PowerShell@2
          displayName: Build MsixBundle
          inputs:
            filePath: 'build/scripts/Build.ps1'
            arguments: -Configuration "${{ configuration }}" -Version $(MSIXVersion) -BuildStep "msixbundle" -IsAzurePipelineBuild

        - task: EsrpCodeSigning@2
          inputs:
            ConnectedServiceName: 'Xlang Code Signing'
            FolderPath: 'AppxBundles\${{ configuration }}'
            Pattern: '*.msixbundle'
            signConfigType: 'inlineSignParams'
            inlineOperation: |
              [
                {
                  "keycode": "CP-230012",
                  "operationSetCode": "SigntoolSign",
                  "parameters": [
                    {
                      "parameterName": "OpusName",
                      "parameterValue": "Microsoft"
                    },
                    {
                      "parameterName": "OpusInfo",
                      "parameterValue": "http://www.microsoft.com"
                    },
                    {
                      "parameterName": "PageHash",
                      "parameterValue": "/NPH"
                    },
                    {
                      "parameterName": "FileDigest",
                      "parameterValue": "/fd sha256"
                    },
                    {
                      "parameterName": "TimeStamp",
                      "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                    }
                  ],
                  "toolName": "signtool.exe",
                  "toolVersion": "6.2.9304.0"
                }
              ]
            SessionTimeout: '60'
            MaxConcurrency: '50'
            MaxRetryAttempts: '5'

        - task: PublishPipelineArtifact@0
          displayName: Publish MSIX Bundle Artifacts
          inputs:
            artifactName: MsixBundle_${{ configuration }}
            targetPath: AppxBundles\${{ configuration }}

- stage: Store_Publish
  dependsOn:
  - SourceAnalysis
  - Build_MsixBundle
  condition: |
    and
    (
      in(dependencies.Build_MsixBundle.result, 'Succeeded'),
      in(dependencies.SourceAnalysis.result, 'Succeeded'),
      eq(variables['EnableStorePublishing'], 'true')
    )
  jobs:
  - job: Store_Publish
    timeoutInMinutes: 360
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: MsixBundle_Release
        targetPath: StorePublish

    - task: MS-RDX-MRO.windows-store-publish-dev.package-task.store-package@2
      displayName: 'Create Staging StoreBroker Package'
      condition: eq(variables['BuildingBranch'], 'staging')
      inputs:
        serviceEndpoint: 'DevHomeGitHubExtensionCanary StoreBroker'
        sbConfigPath: '$(System.DefaultWorkingDirectory)\build\store\canary\SBConfig.json'
        sourceFolder: 'StorePublish'
        contents: '*.msixbundle'
        pdpPath: '$(System.DefaultWorkingDirectory)\build\store\canary\PDPs'
        pdpMediaPath: '$(System.DefaultWorkingDirectory)\build\store\canary\media'
        outSBName: DevHomeStoreSubmissionPackage
        pdpInclude: 'PDP.xml'

    - task: MS-RDX-MRO.windows-store-publish-dev.publish-task.store-publish@2
      displayName: 'Publish Staging StoreBroker Package'
      condition: eq(variables['BuildingBranch'], 'staging')
      inputs:
        serviceEndpoint: 'DevHomeGitHubExtensionCanary StoreBroker'
        appId: 9N806ZKPW85R
        inputMethod: JsonAndZip
        jsonPath: '$(System.DefaultWorkingDirectory)\SBOutDir\DevHomeStoreSubmissionPackage.json'
        zipPath: '$(System.DefaultWorkingDirectory)\SBOutDir\DevHomeStoreSubmissionPackage.zip'
        force: true
        deletePackages: true
        numberOfPackagesToKeep: 2
        jsonZipUpdateMetadata: true
        updateImages: true

    - task: MS-RDX-MRO.windows-store-publish-dev.package-task.store-package@2
      displayName: 'Create Release StoreBroker Package'
      condition: eq(variables['BuildingBranch'], 'release')
      inputs:
        serviceEndpoint: 'DevHomeGitHubExtension StoreBroker'
        sbConfigPath: '$(System.DefaultWorkingDirectory)\build\store\preview\SBConfig.json'
        sourceFolder: 'StorePublish'
        contents: '*.msixbundle'
        pdpPath: '$(System.DefaultWorkingDirectory)\build\store\preview\PDPs'
        pdpMediaPath: '$(System.DefaultWorkingDirectory)\build\store\preview\media'
        outSBName: DevHomeStoreSubmissionPackage
        pdpInclude: 'PDP.xml'

    - task: MS-RDX-MRO.windows-store-publish-dev.publish-task.store-publish@2
      displayName: 'Publish Release StoreBroker Package'
      condition: eq(variables['BuildingBranch'], 'release')
      inputs:
        serviceEndpoint: 'DevHomeGitHubExtension StoreBroker'
        appId: 9NZCC27PR6N6
        inputMethod: JsonAndZip
        jsonPath: '$(System.DefaultWorkingDirectory)\SBOutDir\DevHomeStoreSubmissionPackage.json'
        zipPath: '$(System.DefaultWorkingDirectory)\SBOutDir\DevHomeStoreSubmissionPackage.zip'
        force: true
        deletePackages: true
        numberOfPackagesToKeep: 2
        jsonZipUpdateMetadata: true
        updateImages: true

    - task: PublishPipelineArtifact@0
      displayName: Publish StoreBroker Artifacts
      condition: or(eq(variables['BuildingBranch'], 'staging'), eq(variables['BuildingBranch'], 'release'))
      inputs:
        artifactName: StoreBrokerPackage
        targetPath: '$(System.DefaultWorkingDirectory)\SBOutDir'
